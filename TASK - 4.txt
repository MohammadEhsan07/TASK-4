TASK :- 4

Description: Develop a simple to-do list
application where users can add tasks, mark tasks
as completed, and delete tasks.
Implementation:
1. Create a React component for the to-do list.
2. Use React state (useState hook) to manage the list of
tasks.
3. Implement event handlers for adding, completing, and
deleting tasks.
4. Use conditional rendering to display completed tasks
differently.
5. Apply basic CSS for styling the to-do list and task items.

Programs:-
1. Create the React App
First, create a new React app using Create React App:

sh
Copy code
npx create-react-app todo-app
cd todo-app
2. Update the App Component
Replace the content of src/App.js with the following:

jsx
Copy code
// src/App.js
import React from 'react';
import ToDoList from './ToDoList';
import './App.css';

function App() {
  return (
    <div className="App">
      <ToDoList />
    </div>
  );
}

export default App;
3. Create the To-Do List Component
Create a new file src/ToDoList.js and add the following code:

jsx
Copy code
// src/ToDoList.js
import React, { useState } from 'react';
import './ToDoList.css';

function ToDoList() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState('');

  const addTask = () => {
    if (newTask.trim() !== '') {
      setTasks([...tasks, { text: newTask, completed: false }]);
      setNewTask('');
    }
  };

  const toggleTaskCompletion = (index) => {
    const updatedTasks = tasks.map((task, i) => {
      if (i === index) {
        return { ...task, completed: !task.completed };
      }
      return task;
    });
    setTasks(updatedTasks);
  };

  const deleteTask = (index) => {
    const updatedTasks = tasks.filter((_, i) => i !== index);
    setTasks(updatedTasks);
  };

  return (
    <div className="todo-container">
      <h1>To-Do List</h1>
      <div className="add-task">
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="Add a new task..."
        />
        <button onClick={addTask}>Add</button>
      </div>
      <ul className="task-list">
        {tasks.map((task, index) => (
          <li key={index} className={task.completed ? 'completed' : ''}>
            <span onClick={() => toggleTaskCompletion(index)}>
              {task.text}
            </span>
            <button onClick={() => deleteTask(index)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ToDoList;
4. Create CSS for To-Do List Component
Create a new file src/ToDoList.css and add the following CSS:

css
Copy code
/* src/ToDoList.css */
.todo-container {
  width: 300px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #f9f9f9;
}

h1 {
  text-align: center;
  margin-bottom: 20px;
}

.add-task {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.add-task input {
  flex: 1;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.add-task button {
  padding: 10px;
  font-size: 16px;
  border: none;
  background-color: #28a745;
  color: white;
  border-radius: 4px;
  margin-left: 10px;
  cursor: pointer;
}

.add-task button:hover {
  background-color: #218838;
}

.task-list {
  list-style: none;
  padding: 0;
}

.task-list li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

.task-list li.completed span {
  text-decoration: line-through;
  color: #888;
}

.task-list li button {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
}

.task-list li button:hover {
  background-color: #c82333;
}
5. Update CSS for the Main App
Replace the content of src/App.css with the following:

css
Copy code
/* src/App.css */
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #f0f8ff;
}

.App {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
6. Ensure Index File is Properly Set Up
Replace the content of src/index.js with the following:

jsx
Copy code
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
7. Start the React Application
Finally, start the React application:

sh
Copy code
npm start



